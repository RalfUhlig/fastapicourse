# For running this as a webserver, install package uvicorn, open a console and run
# venv\Scripts\uvicorn.exe app.main:app --reload
# main:     The name of the Python file to start
# app:      The name of the defined FastAPI app
# --reload: Reload the server automatically when the code changes

from fastapi import FastAPI, Response, status, HTTPException, Depends
from typing import List

from sqlalchemy.orm import Session
from .database import engine, get_db
from . import models, schemas, utils

import mysql.connector
import time

# https://www.youtube.com/watch?v=0sOvCWFmrtA&t=19941s

# Setup the database.
models.Base.metadata.create_all(bind=engine)

# define a FastAPI application.
app = FastAPI()

while True:
    try:
        # Database credentials will be stored in environment later.
        conn = mysql.connector.connect(host = "multibox",
                                       database="FastAPICourse",
                                       user="FastAPICourse",
                                       password="FastAPICourse")
        cursor = conn.cursor(dictionary=True)
        print("Database connection was successful.")
        break
    except Exception as error:
        print("Connecting to database failed.")
        print("Error: ", error)
        time.sleep(2)


@app.get("/")
def root():
    return {"message": "Hello World"}   # Will be converted to JSON.


# Get all posts
# Define the model used for the response as a list of posts.
@app.get("/posts", response_model=List[schemas.Post])
def get_posts(db: Session = Depends(get_db)):
    # cursor.execute("""SELECT * FROM posts""")
    # posts = cursor.fetchall()
    posts = db.query(models.Post).all()
    return posts


# Create a new post.
# Define the model used for the response.
@app.post("/posts", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)
def create_posts(post: schemas.PostCreate, db: Session = Depends(get_db)):
    # # %s is a placeholder for a value. So the values a sanitized
    # # and there is less vulnerability for sql injections.
    # cursor.execute("""INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *""",
    #                (post.title, post.content, post.published))
    # new_post = cursor.fetchone()
    # # All changes are state changes and need to be committed to be written to the database.
    # conn.commit()

    # Define a new post.
    # new_post = models.Post(title=post.title, content=post.content, published=post.published)
    # Easier: Convert the post to a dictionary and create the post model by unpacking the dictionary.
    new_post = models.Post(**post.dict())

    # Add the new post to the database.
    db.add(new_post)
    # Commit the changes.
    db.commit()
    # Reload the creates post from the database to get is with all values.
    db.refresh(new_post)

    return new_post


# Get a post by its id.
# Define the model used for the response.
@app.get("/posts/{id}", response_model=schemas.Post)
def get_posts(id: int, db: Session = Depends(get_db)):
    # cursor.execute("""SELECT * FROM posts WHERE id = %s""", [id])
    # post = cursor.fetchone()

    post = db.query(models.Post).filter(models.Post.id == id).first()

    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Post with id {id} was not found.")

    return post


# Delete a post.
# The default status code has to be set again with the response.
# However, by setting the default status code also here, FastAPI will do some validations,
# e.g. checking, if the response is empty (has to be with code 204).
@app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int, db: Session = Depends(get_db)):
    # cursor.execute("""DELETE FROM posts WHERE id = %s RETURNING *""", [id])
    # deleted_post = cursor.fetchone()
    # conn.commit()

    post_query = db.query(models.Post).filter(models.Post.id == id)

    if post_query.first() is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Post with id {id} was not found.")

    post_query.delete(synchronize_session=False)
    db.commit()

    # Return an empty response but with the right status code.
    # The default code defines with the path is not used here.
    return Response(status_code=status.HTTP_204_NO_CONTENT)


# Update a post
# Define the model used for the response.
@app.put("/posts/{id}", response_model=schemas.Post)
def update_post(id: int, post: schemas.PostCreate, db: Session = Depends(get_db)):
    # cursor.execute("""UPDATE posts SET title = %s, content = %s, published = %s WHERE ID = %s""",
    #                (post.title, post.content, post.published, id))
    # affected_rows = cursor.rowcount
    # conn.commit()

    post_query = db.query(models.Post).filter(models.Post.id == id)

    if post_query.first() is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Post with id {id} was not found.")

    # post_query.update({"title": post.title, "content": post.content}, synchronize_session=False)
    post_query.update(post.dict())
    db.commit()

    return post_query.first()


# https://www.youtube.com/watch?v=0sOvCWFmrtA&t=21290s

# Create a new user.
@app.post("/users", status_code=status.HTTP_201_CREATED, response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    # Hash the password.
    hashed_password = utils.hash(user.password)
    user.password = hashed_password

    new_user = models.User(**user.dict())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    return new_user


# Get a user by its id.
@app.get("/users/{id}", response_model=schemas.User)
def get_user(id: int, db: Session = Depends(get_db)):
    user = db.query(models.User).filter(models.User.id == id).first()

    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"User with id {id} was not found.")

    return user

